1) The following function takes two integers as parameters.
Make it return a string containing both integers separated by a space. For example, stringify(2, 3) should return '2 3'.

 String stringify(int x, int y) 

{
    return("'" + x.toString() + " " + y.toString()+ "'");   
}
void main()
{
  print(stringify(2,3));
}


2)Try putting the ??= and ?? operators to work below.

String foo = 'a string';
String bar; 
String baz = foo ?? bar;
void updateSomeVars() 
{
  bar ??= 'a string';
}
void main()
{
  print(foo);
  print(baz);
  updateSomeVars();
  print(bar);
}

3) Try using conditional property access to finish the code snippet below.4

String upperCaseIt(String str)
{
  return str ?.toUpperCase();
}
void main()
{
  //String str;
  print(upperCaseIt("str"));
}


4) Try setting the following variables to the indicated values.

final aListOfStrings = ['a', 'b', 'c'];
final aSetOfInts = {3, 4, 5};
final aMapOfStringsToInts = {'myKey': 12};
final anEmptyListOfDouble = <double>[];
final anEmptySetOfString = <String>{};
final anEmptyMapOfDoublesToInts = <double, int>{};

void main()
{
  print(aListOfStrings);
  print(aSetOfInts);
  print(aMapOfStringsToInts);
  print(anEmptyListOfDouble);
  print(anEmptySetOfString);
  print( anEmptyMapOfDoublesToInts);
  
  5) Try finishing the following statements, which use arrow syntax.
  
  class MyClass {
  int _value1 = 2;
  int _value2 = 3;
  int _value3 = 5;
  int get product => _value1 * _value2 * _value3;
  void incrementValue1() => _value1++;
  String joinWithCommas(List<String> strings) => strings.join(",");
}
void main()
{
  var sk = new MyClass();
  print(sk.product);
  sk.incrementValue1();
  print(sk._value1);
  print(sk.joinWithCommas(['a','b','c']));
}
}


6) Imagine you have a shopping cart class that keeps a private List of prices.
class InvalidPriceException {}

class ShoppingCart 
{
  List<double> _prices = [];
  double get total
  {
    double sum=0;
    for( double p in _prices)
    {
      sum+=p;
    }
    return sum;
  }
  void set prices(List<double> _prices)
  {
    for( double p in _prices)
    { 
      if(p<0)
      throw InvalidPriceException();
    }
   this._prices = _prices; 
  }
  
}
void main(){}

7)Implement tryFunction below. It should execute an untrustworthy method and then do the following:

typedef VoidFunction = void Function();
class ExceptionWithMessage {
  final String message;
  const ExceptionWithMessage(this.message);
}
abstract class Logger {
  void logException(Type t, [String msg]);
  void doneLogging();
}
void tryFunction(VoidFunction untrustworthy, Logger logger) 
{
  try{
  untrustworthy();
  } on ExceptionWithMessage{
    logger.logException(Exception, "");
  } catch(e){
    logger.logException(ExceptionWithMessage, e);
  } finally{
    logger.doneLogging();
  }
}
void main(){}  


8)Add a one-line constructor to MyClass that uses this. syntax to receive and assign values for all three properties of the class.

class MyClass {
  final int anInt;
  final String aString;
  final double aDouble;
 MyClass(this.anInt, this.aString, this.aDouble); 
}
void main()
{
  var sk = new MyClass(1,"sk",3);
}


9)Give the Color class a constructor named Color.black that sets all three properties to zero.

class Color {
  int red;
  int green;
  int blue;
  
  Color(this.red, this.green, this.blue);
  Color.black()
  {
    red=0;
    green=0;
    blue=0;
  }
}
void main()
{
  var sk = new Color.black();
}
